<!-- Load d3.js -->
<script src="https://d3js.org/d3.v4.js"></script>

<div id="timeline_rs_chart"></div>

<%
# We want different colours, but we want them saturated so that white text shows up on top of them.
# From: https://www.schemecolor.com/galaxy-rainbow.php
colors = [
    '#a80000',
    '#fb6400',
    '#ffc400',
    '#62ba27',
    '#3342c4',
    '#9362c4',
]

# List of just the initially-visible series
@vis_series = @series.select { |s| s[:visible] == true }
%>

<div id="legend_parent_flexbox" style="display: flex; justify-content: center;">
  <div id="timeline_legend_child">
    <ul style="display:inline-block">
  <% @series.each_with_index do |this_series, color_index|
       color = colors[color_index % colors.size]
       visible = this_series[:visible]
     %>
  <li style="display: <%= visible ? "inline-block" : "none" %>" data-benchmark="<%= this_series[:benchmark] %>"><span style='background: <%= color %>'>&nbsp;&nbsp; <strong style="color: white;"><%= this_series[:benchmark] %></strong> &nbsp;&nbsp;</span> </li>
  <% end %>
    </ul>
  </div>
</div>

<div class="timeline-report-explanation">
  Y axis values are the total number of seconds to run the benchmark one time - lower is better.<br/>
  Whiskers are shown 2 standard deviations higher and lower.
</div>

<div id="bottom_selection_checkboxes" style="display: none;">
  <ul>
    <% @series.each_with_index do |this_series, color_index|
         color = colors[color_index % colors.size]
         visible = this_series[:visible]
     %>
    <li><input type="checkbox" <%= visible ? "checked='checked'" : ""%> data-benchmark="<%= this_series[:benchmark]%>" /> <span style='background: <%= color %>'>&nbsp;&nbsp; <strong style="color: white;"><%= this_series[:benchmark] %></strong> &nbsp;&nbsp;</span>
    </li>
  <% end %>
  </ul>
</div>

<script>

// D3 line graph, based on https://www.d3-graph-gallery.com/graph/line_basic.html

// set the dimensions and margins of the graph
var margin = {top: 10, right: 30, bottom: 70, left: 40},
    width = 800 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;

// append the svg object to the body of the page
var svg = d3.select("#timeline_rs_chart")
  .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");

var timeParser = d3.timeParse("%Y %m %d %H %M %S");
var timePrinter = d3.timeFormat("%H:%M:%S");
var data_series = [
    <% @series.each_with_index do |this_series, color_index| %>
    {
        name: <%= this_series[:name].inspect %>,
        config: <%= this_series[:config].inspect %>,
        benchmark: <%= this_series[:benchmark].inspect %>,
        visible: <%= this_series[:visible] ? "true" : "false" %>,
        data: [ <%= this_series[:data].map { |t, mean, stddev| "{ date: timeParser(#{t.inspect}), value: #{mean}, stddev: #{stddev} }" }.join(", ") %> ],
        color: <%= colors[color_index % colors.size].inspect %>,
        time_range: [ timeParser(<%= this_series[:data][0][0].inspect %>), timeParser(<%= this_series[:data][-1][0].inspect %>) ],
        value_range: [ <%= this_series[:data].map { |pt| pt[1] }.min %>, <%= this_series[:data].map { |pt| pt[1] }.max %> ]
    },
    <% end %>
    {}
]
data_series.pop();

var all_series_time_range = [ timeParser(<%= @series.map { |this_series| this_series[:data][0][0] }.min.inspect %>), timeParser(<%= @series.map { |this_series| this_series[:data][-1][0] }.max.inspect %>) ];
var all_series_value_range = [ <%= @series.map { |this_series| this_series[:data].map { |pt| pt[1] }.min }.min %>, <%= @series.map { |this_series| this_series[:data].map { |pt| pt[1] }.max }.max %> ];

/* Only for initially-visible series */
var vis_series_time_range = [ timeParser(<%= @vis_series.map { |this_series| this_series[:data][0][0] }.min.inspect %>), timeParser(<%= @vis_series.map { |this_series| this_series[:data][-1][0] }.max.inspect %>) ];
var vis_series_value_range = [ <%= @vis_series.map { |this_series| this_series[:data].map { |pt| pt[1] }.min }.min %>, <%= @vis_series.map { |this_series| this_series[:data].map { |pt| pt[1] }.max }.max %> ];

document.timeline_data = {} // For sharing data w/ handlers

// Add X axis --> it is a date format
var x = d3.scaleTime()
  .domain(d3.extent(vis_series_time_range))
  .range([ 0, width ]);
document.timeline_data.x_axis_function = x; /* Export for the event handlers */
svg.append("g")
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x))
  .selectAll("text")
    .attr("transform", "rotate(-60)")
    .style("text-anchor", "end");

// Add Y axis
var y = d3.scaleLinear()
  .domain([0, d3.max(vis_series_value_range)])
  .range([ height, 0 ]);
document.timeline_data.y_axis_function = y; /* Export for the event handlers */
document.timeline_data.y_axis = d3.axisLeft(y);
document.timeline_data.top_svg_group = svg.append("g")
  .call(document.timeline_data.y_axis);

data_series.forEach(function(item) {
    group = svg.append("g").attr("class", item.name).attr("visibility", item.visible == true ? "visible" : "hidden" )

    // Add the graph line
    group.append("path")
      .datum(item.data)
      .attr("fill", "none")
      .attr("stroke", item.color)
      .attr("stroke-width", 1.5)
      .attr("d", d3.line()
        .x(function(d) { return x(d.date) })
        .y(function(d) { return y(d.value) })
        );

    // Add a circle at each datapoint
    var circles = group.selectAll("circle.whiskerdot." + item.name)
      .data(item.data);
    circles.enter().append("circle")
      .attr("class", "whiskerdot " + item.name)
      .attr("fill", item.color)
      .attr("r", 5.0)
      .attr("cx", function(d) { return x(d.date) } )
      .attr("cy", function(d) { return y(d.value) } )
      .attr("data-tooltip", function(d) { return item.benchmark + " at " + timePrinter(d.date) + ": " + d.value.toFixed(1) + " sec"; } )
      ;

    var whiskerStrokeWidth = 1.0;
    var whiskerBarWidth = 5;

    // Add the whiskers, which are an I-shape of lines
    var middle_lines = group.selectAll("line.whiskercenter." + item.name)
      .data(item.data);
    middle_lines.enter().append("line")
      .attr("class", "whiskercenter " + item.name)
      .attr("stroke", "black")
      .attr("stroke-width", whiskerStrokeWidth)
      .attr("x1", function(d) { return x(d.date) } )
      .attr("y1", function(d) { return y(d.value - 2 * d.stddev) } )
      .attr("x2", function(d) { return x(d.date) } )
      .attr("y2", function(d) { return y(d.value + 2 * d.stddev) } )
      ;

    var top_whiskers = group.selectAll("line.whiskertop." + item.name)
      .data(item.data);
    top_whiskers.enter().append("line")
      .attr("class", "whiskertop " + item.name)
      .attr("stroke", "black")
      .attr("stroke-width", whiskerStrokeWidth)
      .attr("x1", function(d) { return x(d.date) - whiskerBarWidth / 2.0 } )
      .attr("y1", function(d) { return y(d.value + 2 * d.stddev) } )
      .attr("x2", function(d) { return x(d.date) + whiskerBarWidth / 2.0 } )
      .attr("y2", function(d) { return y(d.value + 2 * d.stddev) } )
      ;

    var bottom_whiskers = group.selectAll("line.whiskerbottom." + item.name)
      .data(item.data);
    bottom_whiskers.enter().append("line")
      .attr("class", "whiskerbottom " + item.name)
      .attr("stroke", "black")
      .attr("stroke-width", whiskerStrokeWidth)
      .attr("x1", function(d) { return x(d.date) - whiskerBarWidth / 2.0 } )
      .attr("y1", function(d) { return y(d.value - 2 * d.stddev) } )
      .attr("x2", function(d) { return x(d.date) + whiskerBarWidth / 2.0 } )
      .attr("y2", function(d) { return y(d.value - 2 * d.stddev) } )
      ;
});

</script>
