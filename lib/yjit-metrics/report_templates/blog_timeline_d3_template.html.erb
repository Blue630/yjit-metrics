<!-- Load d3.js -->
<script src="https://d3js.org/d3.v4.js"></script>

<div id="timeline_rs_chart"></div>

<%
# I still sometimes use the Rickshaw color palettes: https://github.com/shutterstock/rickshaw/blob/master/src/js/Rickshaw.Fixtures.Color.js
# Based on Rickshaw's "Munin" palette, which is likely from the Munin ops tool
colors = [
    '#00cc00',
    '#0066b3',
    '#ff8000',
    '#ffcc00',
    '#330099',
    '#990099',
    '#ccff00',
    '#ff0000',
    '#808080',
    '#008f00',
    '#00487d',
    '#b35a00',
    '#b38f00',
    '#6b006b',
    '#8fb300',
    '#b30000',
    '#bebebe',
    '#80ff80',
    '#80c9ff',
    '#ffc080',
    '#ffe680',
    '#aa80ff',
    '#ee00cc',
    '#ff8080',
    '#666600',
    '#ffbfff',
    '#00ffcc',
    '#cc6699',
    '#999900'
]
%>
<div id="timeline_legend">
  <ul style="display:inline-block">
<% @series.each_with_index do |this_series, color_index|
     color = colors[color_index % colors.size] %>
<li style="display: inline-block"><span style='background: <%= color %>'>&nbsp;&nbsp; <%= this_series[:benchmark] %> &nbsp; &nbsp;</span> </li>
<% end %>
  </ul>
</div>

<p>
  Y axis values are the total number of seconds to run the benchmark one time - lower is better.
</p>

<script>

// D3 line graph, based on https://www.d3-graph-gallery.com/graph/line_basic.html

// set the dimensions and margins of the graph
var margin = {top: 10, right: 30, bottom: 100, left: 60},
    width = 800 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;

// append the svg object to the body of the page
var svg = d3.select("#timeline_rs_chart")
  .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");

var timeParser = d3.timeParse("%Y %m %d %H %M %S");
var data_series = [
    <% @series.each_with_index do |this_series, color_index| %>
    {
        name: <%= this_series[:name].inspect %>,
        data: [ <%= this_series[:data].map { |t, mean| "{ date: timeParser(#{t.inspect}), value: #{mean} }" }.join(", ") %> ],
        color: <%= colors[color_index % colors.size].inspect %>,
        time_range: [ timeParser(<%= this_series[:data][0][0].inspect %>), timeParser(<%= this_series[:data][-1][0].inspect %>) ],
        value_range: [ <%= this_series[:data].map { |pt| pt[1] }.min %>, <%= this_series[:data].map { |pt| pt[1] }.max %> ]
    },
    <% end %>
    {}
]
data_series.pop();

var all_series_time_range = [ timeParser(<%= @series.map { |this_series| this_series[:data][0][0] }.min.inspect %>), timeParser(<%= @series.map { |this_series| this_series[:data][-1][0] }.max.inspect %>) ];
var all_series_value_range = [ <%= @series.map { |this_series| this_series[:data].map { |pt| pt[1] }.min }.min %>, <%= @series.map { |this_series| this_series[:data].map { |pt| pt[1] }.max }.max %> ];

// Add X axis --> it is a date format
var x = d3.scaleTime()
  .domain(d3.extent(all_series_time_range))
  .range([ 0, width ]);
svg.append("g")
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x))
  .selectAll("text")
    .attr("transform", "rotate(-60)")
    .style("text-anchor", "end");

// Add Y axis
var y = d3.scaleLinear()
  .domain([0, d3.max(all_series_value_range)])
  .range([ height, 0 ]);
svg.append("g")
  .call(d3.axisLeft(y));

data_series.forEach(function(item) {
    // Add the line
    svg.append("path")
      .datum(item.data)
      .attr("fill", "none")
      .attr("stroke", item.color)
      .attr("stroke-width", 1.5)
      .attr("d", d3.line()
        .x(function(d) { return x(d.date) })
        .y(function(d) { return y(d.value) })
        );
});

</script>
